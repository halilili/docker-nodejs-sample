# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Continous Integration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
   # Run unit tests to make sure everything is üëç
   build:
     name: 'Build, Compile, Test and Linting'
    # Specify the OS we want the workflow to run on
     runs-on: ubuntu-latest
     defaults:
        run:
          shell: bash
          # Define the working directory for all run steps in the workflow
          working-directory: ./src
     strategy:
       matrix:
         node-version: [18.x]
         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

     steps:
    
     - uses: actions/checkout@v4
       name: 'Checkout repository'
      
      
     - name: Setup/Use Node with version ${{ matrix.node-version }}
       uses: actions/setup-node@v3
       with:
         node-version: ${{ matrix.node-version }}
         cache: 'npm'
        
     - run: npm ci
       name: 'Install Dependencies'
      
     - run: npm run build --if-present
       name: 'Build and Compile'

     - name: 'Run the Test'
       run: npm run test

   
        
   # Run the linter to check for code style issues
   lint:
     #needs: build
     name: 'Run linter for code analysis'
     defaults:
       run:
         shell: bash
         # Define the working directory for all run steps in the workflow
         working-directory: ./src
     runs-on: ubuntu-latest
     continue-on-error: true
     steps:    
     - uses: actions/checkout@v4
       name: 'Checkout repository'
    
     - name: 'Install Dependencies'
       run: npm install

     - name: 'Run Linter'
       run: npx standard -v



   docker:
     name: 'Build and Push Docker'
     needs: [build, lint]
     runs-on: ubuntu-latest
     steps:
       - name: Checkout
         uses: actions/checkout@v3
      
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v3

         
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3

         
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
       - name: Extract Docker metadata  ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
         id: meta
         uses: docker/metadata-action@v4.0.1
         with:
           images:  hassanali70826/${{ env.IMAGE_NAME }}
           # set latest tag for master branch
           tags: |
             type=schedule
             type=ref,event=branch
             type=ref,event=tag
             type=ref,event=pr
             type=raw,value=latest,enable={{is_default_branch}}

       # Build and push Docker image with Buildx (don't push on PR)
       # https://github.com/docker/build-push-action
       - name: Build and push Docker Image
         uses: docker/build-push-action@v5 #v3.0.0
         with:
           push: ${{ github.event_name != 'pull_request' }}
           tags: ${{ steps.meta.outputs.tags }}
           labels: ${{ steps.meta.outputs.labels }}


           
       #- name: Build and push
         #uses: docker/build-push-action@v5
         #with:
           #context: .
           #push: true
           #tags: ${{ secrets.DOCKER_USERNAME }}/docker-nodejs-app:latest
           #secrets: |
            #GIT_AUTH_TOKEN=${{ secrets.MYTOKEN }}          
        
